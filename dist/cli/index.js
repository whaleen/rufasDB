#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// src/cli/index.ts
const promises_1 = __importDefault(require("fs/promises"));
const path_1 = __importDefault(require("path"));
async function generateTypes() {
    try {
        const schemaPath = path_1.default.join(process.cwd(), 'schema.rufas');
        const schemaContent = await promises_1.default.readFile(schemaPath, 'utf-8');
        const types = schemaContent
            .split('model')
            .filter(Boolean)
            .map((model) => {
            const [name, ...fields] = model.trim().split('\n');
            return `${name.trim()} {\n  ${fields.join('\n  ')}\n}`;
        })
            .join('\n\n');
        const output = `// Generated by RufasDB
export type Schema = {
${types}
}
`;
        await promises_1.default.writeFile('rufas.d.ts', output);
        console.log('âœ¨ Generated types file');
    }
    catch (error) {
        console.error('Failed to generate types:', error);
        process.exit(1);
    }
}
const command = process.argv[2];
if (command === 'generate') {
    generateTypes();
}
else {
    console.log('Unknown command. Available commands: generate');
}
